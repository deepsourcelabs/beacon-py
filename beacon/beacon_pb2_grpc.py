# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import beacon_pb2 as beacon__pb2


class BeaconStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.InitializeStream = channel.unary_unary(
        '/beacon.Beacon/InitializeStream',
        request_serializer=beacon__pb2.AuthRequest.SerializeToString,
        response_deserializer=beacon__pb2.AuthResponse.FromString,
        )
    self.Transmit = channel.unary_unary(
        '/beacon.Beacon/Transmit',
        request_serializer=beacon__pb2.Batch.SerializeToString,
        response_deserializer=beacon__pb2.Empty.FromString,
        )


class BeaconServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def InitializeStream(self, request, context):
    """make an initialization request for transmission
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Transmit(self, request, context):
    """flush a batch to the server
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_BeaconServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'InitializeStream': grpc.unary_unary_rpc_method_handler(
          servicer.InitializeStream,
          request_deserializer=beacon__pb2.AuthRequest.FromString,
          response_serializer=beacon__pb2.AuthResponse.SerializeToString,
      ),
      'Transmit': grpc.unary_unary_rpc_method_handler(
          servicer.Transmit,
          request_deserializer=beacon__pb2.Batch.FromString,
          response_serializer=beacon__pb2.Empty.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'beacon.Beacon', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
